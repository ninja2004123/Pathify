import * as PIXI from "pixi.js";

// (async () => {
async function initPixi() {
  // Create a new application
  const app = new PIXI.Application();

  // Initialize the application
  const container = document.getElementById("pixi-container");
  await app.init({ background: "#ace7e8", resizeTo: container });

  // Append the application canvas to the document body
  container.appendChild(app.canvas);

  // Creating the Title
  const title_path = "./static/Title.svg";
  const title_asset = PIXI.Assets.load(title_path);
  title_asset.then((texture) => {

    const title = new PIXI.Sprite(texture);

    title.anchor.set(0.5);
    title.scale.set(0.5);
    title.x = app.screen.width / 2;
    title.y = app.screen.height / 2;

    title.interactive = true;
    title.buttonMode = true;
    title.on('pointerdown', () => {
      app.destroy(true, true);

    });

    title.on('pointerover', () => {
      title.scale.set(0.55);
    });

    title.on('pointerout', () => {
      title.scale.set(0.5);
    });
    
    title.on('pointerup', () => {
      title.scale.set(0.5);
    });
    
    app.stage.addChild(title);

    app.renderer.on('resize', () => {
      title.x = app.screen.width / 2;
      title.y = app.screen.height / 2;
    });
  });

  // Creating the Subtitle 
  const subtitle_path = "./static/Subtitle.svg";
  const subtitle_asset = PIXI.Assets.load(subtitle_path);
  subtitle_asset.then((texture) => {
    const subtitle = new PIXI.Sprite(texture);

    subtitle.anchor.set(0.5);
    subtitle.scale.set(0.5);
    subtitle.x = app.screen.width / 2;
    subtitle.y = app.screen.height / 2 + subtitle.height + 50;

    app.stage.addChild(subtitle);

    app.renderer.on('resize', () => {
      subtitle.x = app.screen.width / 2;
      subtitle.y = app.screen.height / 2 + subtitle.height + 50;
    });
  });

  // Creating the Rock
  const rock_path = "./static/Rock.svg";
  const rock_asset = PIXI.Assets.load(rock_path);
  rock_asset.then((texture) => {
    const rock = new PIXI.Sprite(texture);

    rock.anchor.set(0.5);
    rock.x = Math.random() * app.screen.width;
    rock.y = app.screen.height - 90;

    app.stage.addChild(rock);

    let previous_screen_width = app.screen.width;
    app.renderer.on('resize', () => {
      rock.x = app.screen.width * (rock.x / previous_screen_width);
      rock.y = app.screen.height - 90;

      previous_screen_width = app.screen.width;
    });
  });

  // Creating the Grass
  const grass_platform_path = "./static/Grass_Platform.svg";
  const grass_platform_asset = PIXI.Assets.load(grass_platform_path); 
  grass_platform_asset.then((texture) => {
    const grass_platform = new PIXI.TilingSprite(texture, app.screen.width, 100); 

    grass_platform.width = app.screen.width;
    grass_platform.height = 100;
    grass_platform.x = 0;
    grass_platform.y = app.screen.height - grass_platform.height;

    app.stage.addChild(grass_platform);

    app.renderer.on('resize', () => {
      grass_platform.width = app.screen.width;
      grass_platform.y = app.screen.height - grass_platform.height;
    });
  });


  const tree_paths = ["./static/Tree1.svg", "./static/Tree2.svg", "./static/Tree1.svg"];
  tree_paths.forEach(tree_path => {
    const tree_asset = PIXI.Assets.load(tree_path);
    tree_asset.then((texture) => {
      const tree = new PIXI.Sprite(texture);

      tree.anchor.set(0.5);
      tree.scale.set(0.65);
      tree.x = Math.random() * app.screen.width;
      const distance_from_bottom = 125;
      tree.y = app.screen.height - distance_from_bottom;

      app.stage.addChild(tree);

      let previous_screen_width = app.screen.width;
      app.renderer.on('resize', () => {
        tree.x = app.screen.width * (tree.x / previous_screen_width);
        tree.y = app.screen.height - distance_from_bottom;

        previous_screen_width = app.screen.width;
      });
    });
  });



  // Creating the Clouds
  const cloud_paths = ["./static/Cloud1.svg", "./static/Cloud2.svg", "./static/Cloud2.svg"];
  cloud_paths.forEach(cloud_path => {
    const cloud_asset = PIXI.Assets.load(cloud_path);
    cloud_asset.then((texture) => {
      const cloud = new PIXI.Sprite(texture);

      cloud.anchor.set(0.5);
      cloud.x = Math.random() * (app.screen.width + cloud.width);
      cloud.y = Math.random() * (app.screen.height / 2) + cloud.height;

      app.stage.addChild(cloud);
      
      let previous_screen_width = app.screen.width;
      let previous_screen_height = app.screen.height;
      app.renderer.on('resize', () => {
        cloud.x = app.screen.width * (cloud.x / previous_screen_width);
        cloud.y = app.screen.height * (cloud.y / previous_screen_height);

        previous_screen_width = app.screen.width;
        previous_screen_height = app.screen.height;
      });

      app.ticker.add(() => {
        if (cloud.x < 0 - cloud.width) {
          cloud.x = app.screen.width + cloud.width;
          cloud.y = Math.random() * (app.screen.height / 2) + cloud.height;
        }
        cloud.x -= 1;
      });
    });
  });
}
//})();

initPixi();


async function level1() {
  const app = new PIXI.Application();
  const container = document.getElementById("pixi-container");
  await app.init({ background: "#ace7e8", resizeTo: container });
  container.appendChild(app.canvas);

  // Load the assets
  const assets = [
    "./static/Title.svg",
    "./static/Subtitle.svg",
    "./static/Rock.svg",
    "./static/Grass_Platform.svg",
    "./static/Tree1.svg",
    "./static/Tree2.svg",
    "./static/Cloud1.svg",
    "./static/Cloud2.svg"
  ];

  await PIXI.Assets.addBundle("assets", assets);
}